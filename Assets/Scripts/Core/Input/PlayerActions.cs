//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Core/Input/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""bed96611-8fe5-4f43-9bf8-2fbf1f20ba99"",
            ""actions"": [
                {
                    ""name"": ""PanToggle"",
                    ""type"": ""Button"",
                    ""id"": ""a709f9ba-7030-47f9-9dc4-bc4b4180252c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pan"",
                    ""type"": ""Value"",
                    ""id"": ""e5b5ce38-1c73-49ab-ab9b-51fd38f63ea1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dcecc665-aa51-4771-91a6-25b9f9782a9a"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PanToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a04e323-9d6b-4f32-b999-88a440e51382"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GeoShortcuts"",
            ""id"": ""d64da95e-161d-40da-9ec7-f29fd074ee74"",
            ""actions"": [],
            ""bindings"": []
        },
        {
            ""name"": ""BatShortcuts"",
            ""id"": ""fa479cfa-4aaf-41d2-869f-4bd2d638f384"",
            ""actions"": [
                {
                    ""name"": ""EndTurn"",
                    ""type"": ""Button"",
                    ""id"": ""f43c64bb-e484-4811-9bb3-8fdb8a1049f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CycleUnit"",
                    ""type"": ""Button"",
                    ""id"": ""21e80e26-6d92-4632-b8f3-05a870a74edb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""20b121dc-9449-4ee3-a11b-347ff335de67"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EndTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1eb4483f-8f89-4d56-a45b-a9e6c92b13a0"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CycleUnit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_PanToggle = m_Camera.FindAction("PanToggle", throwIfNotFound: true);
        m_Camera_Pan = m_Camera.FindAction("Pan", throwIfNotFound: true);
        // GeoShortcuts
        m_GeoShortcuts = asset.FindActionMap("GeoShortcuts", throwIfNotFound: true);
        // BatShortcuts
        m_BatShortcuts = asset.FindActionMap("BatShortcuts", throwIfNotFound: true);
        m_BatShortcuts_EndTurn = m_BatShortcuts.FindAction("EndTurn", throwIfNotFound: true);
        m_BatShortcuts_CycleUnit = m_BatShortcuts.FindAction("CycleUnit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_PanToggle;
    private readonly InputAction m_Camera_Pan;
    public struct CameraActions
    {
        private @PlayerActions m_Wrapper;
        public CameraActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PanToggle => m_Wrapper.m_Camera_PanToggle;
        public InputAction @Pan => m_Wrapper.m_Camera_Pan;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @PanToggle.started += instance.OnPanToggle;
            @PanToggle.performed += instance.OnPanToggle;
            @PanToggle.canceled += instance.OnPanToggle;
            @Pan.started += instance.OnPan;
            @Pan.performed += instance.OnPan;
            @Pan.canceled += instance.OnPan;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @PanToggle.started -= instance.OnPanToggle;
            @PanToggle.performed -= instance.OnPanToggle;
            @PanToggle.canceled -= instance.OnPanToggle;
            @Pan.started -= instance.OnPan;
            @Pan.performed -= instance.OnPan;
            @Pan.canceled -= instance.OnPan;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // GeoShortcuts
    private readonly InputActionMap m_GeoShortcuts;
    private List<IGeoShortcutsActions> m_GeoShortcutsActionsCallbackInterfaces = new List<IGeoShortcutsActions>();
    public struct GeoShortcutsActions
    {
        private @PlayerActions m_Wrapper;
        public GeoShortcutsActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_GeoShortcuts; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GeoShortcutsActions set) { return set.Get(); }
        public void AddCallbacks(IGeoShortcutsActions instance)
        {
            if (instance == null || m_Wrapper.m_GeoShortcutsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GeoShortcutsActionsCallbackInterfaces.Add(instance);
        }

        private void UnregisterCallbacks(IGeoShortcutsActions instance)
        {
        }

        public void RemoveCallbacks(IGeoShortcutsActions instance)
        {
            if (m_Wrapper.m_GeoShortcutsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGeoShortcutsActions instance)
        {
            foreach (var item in m_Wrapper.m_GeoShortcutsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GeoShortcutsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GeoShortcutsActions @GeoShortcuts => new GeoShortcutsActions(this);

    // BatShortcuts
    private readonly InputActionMap m_BatShortcuts;
    private List<IBatShortcutsActions> m_BatShortcutsActionsCallbackInterfaces = new List<IBatShortcutsActions>();
    private readonly InputAction m_BatShortcuts_EndTurn;
    private readonly InputAction m_BatShortcuts_CycleUnit;
    public struct BatShortcutsActions
    {
        private @PlayerActions m_Wrapper;
        public BatShortcutsActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @EndTurn => m_Wrapper.m_BatShortcuts_EndTurn;
        public InputAction @CycleUnit => m_Wrapper.m_BatShortcuts_CycleUnit;
        public InputActionMap Get() { return m_Wrapper.m_BatShortcuts; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BatShortcutsActions set) { return set.Get(); }
        public void AddCallbacks(IBatShortcutsActions instance)
        {
            if (instance == null || m_Wrapper.m_BatShortcutsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BatShortcutsActionsCallbackInterfaces.Add(instance);
            @EndTurn.started += instance.OnEndTurn;
            @EndTurn.performed += instance.OnEndTurn;
            @EndTurn.canceled += instance.OnEndTurn;
            @CycleUnit.started += instance.OnCycleUnit;
            @CycleUnit.performed += instance.OnCycleUnit;
            @CycleUnit.canceled += instance.OnCycleUnit;
        }

        private void UnregisterCallbacks(IBatShortcutsActions instance)
        {
            @EndTurn.started -= instance.OnEndTurn;
            @EndTurn.performed -= instance.OnEndTurn;
            @EndTurn.canceled -= instance.OnEndTurn;
            @CycleUnit.started -= instance.OnCycleUnit;
            @CycleUnit.performed -= instance.OnCycleUnit;
            @CycleUnit.canceled -= instance.OnCycleUnit;
        }

        public void RemoveCallbacks(IBatShortcutsActions instance)
        {
            if (m_Wrapper.m_BatShortcutsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBatShortcutsActions instance)
        {
            foreach (var item in m_Wrapper.m_BatShortcutsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BatShortcutsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BatShortcutsActions @BatShortcuts => new BatShortcutsActions(this);
    public interface ICameraActions
    {
        void OnPanToggle(InputAction.CallbackContext context);
        void OnPan(InputAction.CallbackContext context);
    }
    public interface IGeoShortcutsActions
    {
    }
    public interface IBatShortcutsActions
    {
        void OnEndTurn(InputAction.CallbackContext context);
        void OnCycleUnit(InputAction.CallbackContext context);
    }
}
